library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
install_github('rCharts', 'ramnathv')
library(devtools)
install.packages("devtools")
install_github('rCharts', 'ramnathv')
library(devtools)
install_github('rCharts', 'ramnathv')
airquality
dTable(airquality, sPaginationType = "full_numbers")
d
?dTable
??dTable
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
fruit
fruits
Fruits
data(Fruits)
install.packages("devtools")
install.packages("rtools")
install.packages("caret")
z = 10*(12-10)/4
z
10*2/12
pnorm(5)
1-pnorm(5)
b0 = c(140,138,150,148,135)
b1 = c(132,135,151,146,130)
b = b1-b0
mean(b)
sd(b)
z = sqrt(5)*mean(b)/sd(b)
z
qnorm(0.975)
pnorm(z)
pt(z,4)
sqrt(9)*1100/30
1100 + c(-1,1)*(30/sqrt(9))*pt(0.975)
1100 + c(-1,1)*(30/sqrt(9))*pt(0.975,8)
1100 + c(-1,1)*(30/sqrt(9))*qt(0.975,8)
4 + c(-1,1)*(0.5/sqrt(100))*qt(0.975,99)
6 + c(-1,1)*(2/sqrt(100))*qt(0.975,99)
4 + c(-1,1)*(0.5/sqrt(100))*qnorm(0.975,99)
4 + c(-1,1)*(0.5/sqrt(100))*qnorm(0.975)
6 + c(-1,1)*(2/sqrt(100))*qnorm(0.975)
-3 + c(-1,1)*(1.5/sqrt(9))*qt(0.975,8)
1 + c(-1,1)*(1.8/sqrt(9))*qt(0.975,8)
cit <- -3 + c(-1,1)*(1.5/sqrt(9))*qt(0.975,8)
cip <- 1 + c(-1,1)*(1.8/sqrt(9))*qt(0.975,8)
cit-cip
?createDataPartition
install.packages("AppliedPredictiveModeling")
?createDataPartition
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
?createDataPartition
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(ggplot2)
plot(concrete$CompressiveStrength,pch=19)
?plot
head(concrete)
plot(concrete$CompressiveStrength,pch=19,col=concrete$cement)
?plot
qplot(concrete$CompressiveStrength,pch=19)
qplot(concrete$CompressiveStrength)
plot(concrete$CompressiveStrength,pch=19,col=concrete$cement)
plot(concrete$CompressiveStrength,pch=19,col=3)
summary(concrete)
plot(concrete$CompressiveStrength,pch=19,col=cement/100)
cc <- concrete
plot(cc$CompressiveStrength,pch=19,col=cc$cement/100)
library(data.table)
cc <- data.table(cc)
cc[,CementCol := trunc(Cement/100)]
plot(cc$CompressiveStrength,pch=19,col=cc$CementCol)
plot(cc$CompressiveStrength,pch=19,col=1)
plot(cc$CompressiveStrength,pch=19,col=2)
plot(cc$CompressiveStrength,pch=19,col=3)
plot(cc$CompressiveStrength,pch=19,col=4)
plot(cc$CompressiveStrength,pch=19,col=5)
plot(cc$CompressiveStrength,pch=19,col=6)
plot(cc$CompressiveStrength,pch=19,col=7)
plot(cc$CompressiveStrength,pch=19,col=cc$CementCol)
cc[,FlyAshCol := trunc(FlyAsh/100)]
plot(cc$FlyAsh,pch=19,col=cc$CementCol)
plot(cc$FlyAsh,pch=19)
featurePlot(x=cc[,-c(CompressiveStrenth)],y=cc$CompressiveStrength,plot="pairs")
featurePlot(x=cc[,-c(CompressiveStrength)],y=cc$CompressiveStrength,plot="pairs")
featurePlot(x=cc,y=cc$CompressiveStrength,plot="pairs")
ccc <- cc[,-c("CementCol","FlyAshCol")]
ccc <- cc[-c("CementCol","FlyAshCol")]
ccdf <- data.fram(cc)
ccdf <- data.frame(cc)
ccc <- ccdf[-c("CementCol","FlyAshCol")]
ccc <- ccdf[1:9]
featurePlot(x=ccc,y=ccc$CompressiveStrength,plot="pairs")
plot(concrete$Age,pch=19,col=3)
plot(concrete$CompressiveStrength,pch=19,col=1)
plot(concrete$CompressiveStrength,concrete$Aage,pch=19,col=1)
plot(concrete$CompressiveStrength,concrete$Age,pch=19,col=1)
plot(concrete$CompressiveStrength,pch=19,col=1)
plot(concrete$CompressiveStrength,concrete$Age,pch=19,col=1)
plot(concrete$Age,pch=19,col=3)
plot(concrete$CompressiveStrength,pch=19,col=1)
cor(cc)
cor(ccc)
cor(ccc)
cor(ccc)
fit <- lm( CompressiveStrength ~ Cement + CoarseAggregate + Age)
fit <- lm( CompressiveStrength ~ Cement + CoarseAggregate + Age, data=ccc)
summary(fit)
summary(ccc)
histo(ccc$SuperPlasticizer)
hist(ccc$SuperPlasticizer)
head(ccc)
hist(ccc$Superplasticizer)
cccc <- ccc[,sp1 := ln(Superplasticizer+1)]
cccc <- ccc[,sp1 := log(Superplasticizer+1)]
class(ccc)
ccc <- data.table(ccc)
cccc <- ccc[,sp1 := log(Superplasticizer+1)]
hist[cccc$sp1]
cccc
hist[cccc$sp1]
sp1 <- cccc$sp1
hist(sp1)
hist(sp1,50)
hist(cccc$sp1)
hist(cccc$sp1,50)
hist(cccc$Superplasticizer,50)
hist(cccc$sp1,50)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(adData)
s1 <- 1.5
s2 <- 1.8
n1 <- 9
n2 <- 9
num <- ((s1*s2/n1) + (s2*s2)/n2)^2
fk1 <- s1*s1/n1
fk2 <- s2*s2/n2
num <- (f1 + f2)^2
num <- (fk1 + fk2)^2
denom <- (fk1)^2*(n1-1) + (fk2)^2*(n2-1)
num/denom
num
denom
t <- (-3-1)/sqrt(fk1 + fk2)
t
df <- num/denom
pt(t,df)
pt(t,8)
fk1
fk2
2.25/9
denom <- (fk1)^2/(n1-1) + (fk2)^2/(n2-1)
denom
num/denom
df <- nu/denom
df <- num/denom
pt(t,df)
-4 + c(1,-1)*sqrt(9)*qt(0.975,df)/sqrt(sqrt(num))
-4 + c(1,-1)*sqrt(9)*qt(0.975,df)/sqrt(num)
-4 + c(1,-1)*sqrt(9)*qt(0.975,df)/num
-4 + c(1,-1)*sqrt(9)*qt(0.975,df)/sqrt(denom)
-4 + c(1,-1)*sqrt(9)*qt(0.975,df)/denom
sqrt(num)
sqrt(sqrt(num))
-4 + c(1,-1)*qt(0.975,df)/sqrt(sqrt(num))
-4 + c(1,-1)*qt(0.975,df)/sqrt(num)
-4 + c(1,-1)*qt(0.975,df)/denom
-4 + c(1,-1)*sqrt(9)*qt(0.95,df)/sqrt(sqrt(num))
-4 + c(1,-1)*qt(0.975,df)/denom
-4 + c(1,-1)*qt(0.975,df)/sqrt(sqrt(num))
-4 + c(1,-1)*qt(0.95,df)/sqrt(sqrt(num))
-4 + c(-1,1)*qt(0.95,df)/sqrt(sqrt(num))
(c[1]+c[2])/2
ci <- -4 + c(-1,1)*qt(0.95,df)/sqrt(sqrt(num))
(ci[1]+ci[2])/2
ai[1] <- -5.044
a1 <- -5.044
a2 <- -2.956
(a1+a2)/2
ci <- -4 + c(-1,1)*qt(0.95,16)/sqrt(sqrt(num))
ci
df
sqrt(sqrt(num))
ss <- sqrt(sqrt(num))
0 / 22
9 / ss
2/1.5
3/1.5
3/1.8
ci <- -4 + c(-1,1)*qt(0.95,16)/1.8
ci <- -4 + c(-1,1)*qt(0.95,16)/1.9
ci <- -4 + c(-1,1)*qt(0.95,16)/1.7
3/(sqrt(1.5^2 + 1.8^2))
3/(sqrt(1.5^2/2 + 1.8^2/2))
bl <- c(140, 138, 150, 148, 135)
fu <- c(132, 135, 151, 146, 130)
t.test(fu, bl, alternative = "two.sided", paired = TRUE)
b <- fu-bl
t <- sqrt(5)*mean(b)/sd(b)
t
2*pt(t,4)
s <- sqrt(mean(bl)/5  + mean(fu)/5)
s
s <- sqrt(16/5  + 16/5)
s
t <- -3.4/s
t
2*pt(t,4)
4/sqrt(5)
s <- 4/sqrt(5)
s
2*pt(t,8)
s <- sqrt(16/5  + 16/5)
bl <- c(140, 138, 150, 148, 135)
fu <- c(132, 135, 151, 146, 130)
m <- mean(fu-bl)
s <- sd(fu-bl)
t <- sqrt(2)*m/s
t
s
m
pt(t,4)
t <- sqrt(4)*m/s
t
t <- sqrt(5)*m/s
t
pt(t,4)
2*pt(t,4)
m + s*qt(t,4)
qt(t,4)
m + s*qt(0.95,4)
m + s*qt(0.975,4)
m + c(-1,1)* s*qt(0.975,4)
m + c(-1,1)* s*qt(0.975,4)/sqrt(5)
sp <- sd(fu-bl)
s
sp
su <- sqrt(sd(bl)^2/sqrt(5) + sd(fu)^2/sqrt(5))
su
tu <- m/su
tu
2*pt(t,8)
su <- sqrt(sd(bl)^2/5 + sd(fu)^2/5
)
su <- sqrt(sd(bl)^2/5 + sd(fu)^2/5)
su
tu <- m/su
tu
2*pt(t,8)
2*pt(tu,8)
2*pt(tu,4)
2*pt(tu,8)
m + c(-1,1)*su*qt(0.975,4)
t.test(bl-fu)
t.test(fu-bl)
t.test(fu,bl)
340 / 28
m + c(-1,1)*su*qt(0.975,8)
50000*365*80
setwd("C:/Users/mwise/Desktop")
setwd("C:/DataCert/ML/PmlProject")
knit2html('PmlProject.Rmd')
library(knitr)
knit2html('PmlProject.Rmd')
knit2html('PmlProject.Rmd')
